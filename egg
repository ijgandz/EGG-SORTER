#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Keypad.h>



LiquidCrystal_I2C lcd(0x27, 16, 2);
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {32, 33, 25, 26};
byte colPins[COLS] = {27, 14, 12, 13};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

String smallEggPrice = "";
String mediumEggPrice = "";
String largeEggPrice = "";

bool inputSmallEggPrice = false;
bool inputMediumEggPrice = false;
bool inputLargeEggPrice = false;

bool viewPrices = false;

const int buzzerPin = 23; // Change the pin number based on your buzzer connection

const int redLedPin = 39;   // Red LED pin
const int greenLedPin = 36; // Green LED pin

void setup() {
  pinMode(redLedPin, OUTPUT);   // Set the red LED pin as an output
  pinMode(greenLedPin, OUTPUT); // Set the green LED pin as an output
  digitalWrite(greenLedPin, HIGH);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("A-SMALL B-MEDIUM");
  lcd.setCursor(0, 1);
  lcd.print(" C-LARGE");


}

void loop() {
  char key = keypad.getKey();
  if (key) {
    // Play buzzer tone or melody based on the pressed key
    playBuzzerMelody(key);

    switch (key) {
      case 'A':
        lcd.clear();
        lcd.print("Enter small egg");
        lcd.setCursor(0, 1);
        lcd.print("price:");
        inputSmallEggPrice = true;
        break;
      case 'B':
        lcd.clear();
        lcd.print("Enter medium egg");
        lcd.setCursor(0, 1);
        lcd.print("price:");
        inputMediumEggPrice = true;
        break;
      case 'C':
        lcd.clear();
        lcd.print("Enter large egg");
        lcd.setCursor(0, 1);
        lcd.print("price:");
        inputLargeEggPrice = true;
        break;
      case 'D':
        lcd.clear();
        if (!viewPrices) {
          lcd.print("Small: " + smallEggPrice);
          lcd.setCursor(0, 1);
          lcd.print("Medium: " + mediumEggPrice);
          lcd.setCursor(0, 2);
          lcd.print("Large: " + largeEggPrice);
          delay(2000);
          lcd.clear();
          lcd.print("Large: " + largeEggPrice);
          viewPrices = true;
        } else {
          lcd.print("Press A, B, or C to enter prices");
          lcd.setCursor(0, 1);
          lcd.print("to enter prices");
          viewPrices = false;
        }
        break;
      case '*':
        resetPrices();
        break;
      default:
        if (inputSmallEggPrice) {
          capturePrice(smallEggPrice, key);
        } else if (inputMediumEggPrice) {
          capturePrice(mediumEggPrice, key);
        } else if (inputLargeEggPrice) {
          capturePrice(largeEggPrice, key);
        }
    }
  }
}



void capturePrice(String &price, char key) {
  if (key == '#') {
    inputSmallEggPrice = false;
    inputMediumEggPrice = false;
    inputLargeEggPrice = false;
    lcd.clear();
    lcd.print("Entered hehe");
    delay(2000);
        lcd.clear();
        lcd.print("A,B,C FOR INPUT");
        lcd.setCursor(0, 1);
        lcd.print("D-PRICELIST");
  } else {
    price += key;
    lcd.print(key);
  }
}

void resetPrices() {
  smallEggPrice = "";
  mediumEggPrice = "";
  largeEggPrice = "";
  viewPrices = false;
  lcd.clear();
  lcd.print("Prices reset");
  delay(2000);
  lcd.clear();
        lcd.print("A,B,C FOR INPUT");
        lcd.setCursor(0, 1);
        lcd.print("D-PRICELIST");
}

void playBuzzerMelody(char key) {
  // Map specific keys to corresponding tones
  if (key == 'A' || key == 'B' || key == 'C' || key == 'D' || key == '*' || key == '#') {
    digitalWrite(greenLedPin, HIGH);
    tone(buzzerPin, 1000); // Example tone, adjust as needed
    delay(100);
    noTone(buzzerPin);
    delay(100);
    tone(buzzerPin, 1000);
    delay(100);
    noTone(buzzerPin);
    delay(100);
    tone(buzzerPin, 1000);
    delay(100);
    noTone(buzzerPin);
    digitalWrite(greenLedPin, LOW);
  } else if (key >= '0' && key <= '9') {
    digitalWrite(redLedPin, HIGH);
    tone(buzzerPin, 1000, 100); // Buzz for numeric keys
    delay(100);
    noTone(buzzerPin);
    digitalWrite(redLedPin, LOW);
  }
}
